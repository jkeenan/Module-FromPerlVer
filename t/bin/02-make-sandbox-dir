#!/usr/bin/env perl
########################################################################
# housekeeping
########################################################################

use File::Basename;
use Archive::Tar;

use FindBin qw( $Bin );
use lib "$Bin/../lib";
use Test::KwikHaks;

########################################################################
# package variables 
########################################################################

my $sand_d  = "sandbox";
my $git_d   = "$sand_d/.git";
my $tball   = "$git_d.tar";

my $verbose     = $ENV{ VERBOSE_FROMPERLVER };

*output = Test::KwikHaks->can( 'output' );

########################################################################
# generate the ./git directory with version tags.
########################################################################

test_git_version;

if( -d $git_d )
{
    output( "Existing: '$git_d'\n" );
}
elsif( -e $tball )
{
    # make this all show up.

    select *STDERR
    if $verbose;

    output( "Recover $git_d using '$tball'.\n" );

    my $tar = Archive::Tar->new;

    eval
    {
        chdir $sand_d
        or die "Failed chdir: '$sand_d', $!.\n";
            
        $tar->extract_archive( basename $tball )
        or die 'Failed extract: ' . $tar->error;

        output( "Extracted $tball -> $git_d\n" );
        
        1
    }
    ? output( "Prepared sandbox: '$git_d'\n" )
    : warn "Failed extract: Git.pm tests will be skipped\n$@\n"
    ;
}
elsif( -d $sand_d )
{
    warn "Botched distribution: missing '$sand_d'.\n";
}
else
{
    warn "Missing sandbox: $git_d\n";
    warn "Git.pm tests will skip: missing '$git_d' and '$tball'.\n";
}

# this isn't a module
0
__END__
